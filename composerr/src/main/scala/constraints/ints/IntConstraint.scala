package cl.ravenhill.composerr
package constraints.ints

import constraints.Constraint
import exceptions.IntConstraintException

/**
 * A trait representing a constraint on an integer value.
 *
 * The `IntConstraint` trait extends the `Constraint` trait specifically for integer values. It provides a method for
 * generating exceptions in cases where the integer constraint is violated. The exceptions generated by this trait are
 * instances of `IntConstraintException`, which are tailored to indicate issues related to integer constraints.
 *
 * @example
 * {{{
 * // Example of a custom integer constraint that checks if a value is positive:
 * object PositiveIntConstraint extends IntConstraint {
 *   val validator: Int => Boolean = _ > 0
 * }
 *
 * val value = -5
 * if (!PositiveIntConstraint.validator(value)) {
 *   throw PositiveIntConstraint.generateException("The value must be positive.")
 * }
 * }}}
 */
trait IntConstraint extends Constraint[Int] {

    /**
     * Generates an `IntConstraintException` with a given description.
     *
     * This method creates an exception specifically for violations of integer constraints.
     *
     * @param description A message that explains the constraint violation related to the integer value.
     * @return An `IntConstraintException` with the provided description.
     */
    override def generateException(description: String): IntConstraintException =
        IntConstraintException(description)
}
