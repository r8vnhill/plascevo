package cl.ravenhill.plascevo
package evolution.executors.construction

import exceptions.InvalidSizeException

import akka.actor.typed.scaladsl.AskPattern.*
import akka.actor.typed.scaladsl.Behaviors
import akka.actor.typed.{ActorRef, ActorSystem, Behavior}
import akka.util.Timeout
import cl.ravenhill.composerr.Constrained.constrained
import cl.ravenhill.composerr.constraints.ints.BeNegative

import java.util.UUID
import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent.duration.*
import scala.concurrent.{Await, Future}
import scala.reflect.ClassTag

/** A concurrent constructor for generating sequences of values using Akka actors in an evolutionary algorithm.
 *
 * The `AkkaConcurrentConstructor` class extends the [[ConstructorExecutor]] trait, utilizing Akka actors to generate
 * sequences of values concurrently. This approach leverages Akka's actor-based concurrency model to distribute the
 * initialization of sequence elements across multiple actors, making it well-suited for parallel processing in
 * large-scale or computationally intensive tasks.
 *
 * @tparam T The type of value generated by the constructor.
 * @param system The `ActorSystem` that manages the lifecycle of the actors used for concurrent sequence generation.
 * @example
 * {{{
 * // Example usage of AkkaConcurrentConstructor to create a sequence of integers concurrently
 * given ActorSystem[SequenceActor.Command] = ActorSystem(Behaviors.empty, "SequenceSystem")
 * val constructor = AkkaConcurrentConstructor[Int](system)
 * val sequence = constructor(5, index => index * 2)
 * // sequence: Seq[Int] = Seq(0, 2, 4, 6, 8)
 * }}}
 */
class AkkaConcurrentConstructor[T: ClassTag](system: ActorSystem[SequenceActor.Command])
    extends ConstructorExecutor[T] {

    /** The timeout duration for actor responses, set to 3 seconds. */
    given timeout: Timeout = 3.seconds

    /** Generates a sequence of values concurrently using Akka actors.
     *
     * The `apply` method creates a sequence of the specified size by dispatching the initialization of each element to
     * an Akka actor. The actors process the initialization concurrently, and the results are collected and returned as
     * a sequence. This method ensures that the size is non-negative before proceeding with the sequence construction.
     * If a negative size is provided, a [[CompositeException]] containing an [[InvalidSizeException]] is thrown.
     *
     * @param size The number of elements to generate in the sequence.
     * @param init A function that takes an index and returns a value of type `T`, used to initialize each element in
     *             the sequence.
     * @return A sequence of values generated concurrently by Akka actors.
     * @throws CompositeException   containing an [[InvalidSizeException]] if the size is negative.
     * @throws InvalidSizeException if `shortCircuit` is enabled and the size is negative.
     */
    override def apply(size: Int, init: Int => T): Seq[T] = {
        constrained {
            "Cannot create a sequence with a negative size." ~ (size mustNot BeNegative, InvalidSizeException(_))
        }

        given ActorSystem[SequenceActor.Command] = system

        // Generate a unique actor name
        val uniqueName = s"sequence-actor-${UUID.randomUUID()}"
        val actor = system.systemActorOf(SequenceActor[T](), uniqueName)

        val futures = (0 until size).map { index =>
            actor.ask[Any](replyTo => SequenceActor.Generate(index, init, replyTo)).mapTo[T]
        }

        // Await the results
        Await.result(Future.sequence(futures), timeout.duration)
    }
}

/** Companion object for `SequenceActor`, defining commands and actor behavior. */
object SequenceActor {

    /** The command trait for `SequenceActor`. */
    sealed trait Command

    /** A command to generate a value for a specific index.
     *
     * @param index   The index for which the value is generated.
     * @param init    The function used to generate the value.
     * @param replyTo The actor to send the generated value to.
     */
    case class Generate(index: Int, init: Int => Any, replyTo: ActorRef[Any]) extends Command

    /** Creates the behavior for the `SequenceActor`, which handles `Generate` commands.
     *
     * @tparam T The type of value generated by the actor.
     * @return The behavior for the `SequenceActor`.
     */
    def apply[T](): Behavior[Command] = Behaviors.receiveMessage {
        case Generate(index, init, replyTo) =>
            replyTo ! init(index)
            Behaviors.same
    }
}
