package cl.ravenhill.plascevo
package genetics.chromosomes

import genetics.genes.numeric.{DoubleGene, doubleGeneGen}

import org.scalacheck.Gen

import scala.collection.mutable.ListBuffer

class DoubleChromosomeTest extends AbstractPlascevoTest {
    "A DoubleChromosome" - {
        "should be able to create a copy with different genes" in {
            forAll(
                doubleChromosomeGen(Gen.choose(0.0, 10.0)),
                Gen.listOf(Gen.choose(0.0, 10.0))
            ) { (chromosome, newValues) =>
                val newGenes = newValues.map(DoubleGene(_)())
                val copy = chromosome.duplicateWithGenes(newGenes)
                copy.genes shouldEqual newGenes
            }
        }
    }
}

/**
 * Generates a `DoubleChromosome` with a specified number of `DoubleGene` elements.
 *
 * The `doubleChromosomeGen` function creates a generator that produces instances of `DoubleChromosome`. Each chromosome 
 * consists of a sequence of `DoubleGene` values, generated using the provided value generator and range generator. The 
 * size of the chromosome is determined by a separate size generator.
 *
 * @param valueGen The generator used to produce the value for each `DoubleGene` in the chromosome. The values generated 
 *                 by this generator will be the values assigned to each gene.
 * @param rangeGen The generator used to produce a range (a pair of `Double` values) that defines the boundaries for each 
 *                 `DoubleGene` in the chromosome. Defaults to generating a range between -100.0 and 100.0. The range 
 *                 generator should produce a valid range where the first value is less than or equal to the second
 *                 value if `strict` is true.
 * @param sizeGen  The generator used to determine the number of genes in the chromosome. Defaults to generating a size 
 *                 between 1 and 100.
 * @return A generator that produces `DoubleChromosome` instances. Each chromosome will have the number of genes
 *         specified by `sizeGen`, with each gene having a value generated by `valueGen` and a range generated by
 *         `rangeGen`.
 */
def doubleChromosomeGen(
    valueGen: Gen[Double],
    rangeGen: Gen[(Double, Double)] = homogeneousOrderedPairGen(Gen.chooseNum(-100.0, 100.0), strict = true),
    sizeGen: Gen[Int] = Gen.chooseNum(1, 100)
): Gen[DoubleChromosome] = {
    sizeGen.flatMap { size =>
        Gen.listOfN(size, valueGen).flatMap { values =>
            rangeGen.flatMap { range =>
                val genes = values.map(DoubleGene(_, range)())
                Gen.const(DoubleChromosome(genes))
            }
        }
    }
}
