/*
 * Copyright (c) 2024, Ignacio Slater M.
 * 2-Clause BSD License.
 */

package cl.ravenhill.plascevo
package genetics

import genetics.genes.{Gene, SimpleGene, simpleGeneGen}

import cl.ravenhill.plascevo.genetics.chromosomes.Chromosome
import org.scalacheck.{Arbitrary, Gen}

import scala.collection.mutable.ListBuffer

package object chromosomes {
    /** Generates a chromosome for an evolutionary algorithm.
     *
     * The `chromosomeGen` function produces a generator (`Gen`) that creates a `Chromosome` by sampling genes from the
     * provided `geneGen` generator. The number of genes in the chromosome is determined by a random size
     * between the specified minimum and maximum values.
     *
     * This function is a simplified version of `chromosomeAndSizeGen`, returning only the generated `Chromosome`
     * without its size.
     *
     * @param geneGen A generator for individual genes of type `G`.
     * @param minSize The minimum number of genes in the chromosome. Defaults to `0`.
     * @param maxSize The maximum number of genes in the chromosome. Defaults to `10`.
     * @tparam T The type of value held by the genes.
     * @tparam G The type of the gene, which must extend `Gene[T, G]`.
     * @return A generator that produces a `Chromosome[T, G]` with a random number of genes between `minSize` and
     *         `maxSize`.
     */
    def chromosomeGen[T, G <: Gene[T, G]](
        geneGen: Gen[SimpleGene],
        minSize: Int = 0,
        maxSize: Int = 10
    ): Gen[SimpleChromosome] = chromosomeAndSizeGen(geneGen, minSize, maxSize).map(_._1)


    /** Generates a chromosome and its size for an evolutionary algorithm.
     *
     * The `chromosomeAndSizeGen` function produces a generator (`Gen`) that creates a tuple consisting of a
     * `Chromosome` and its size. The chromosome is generated by sampling genes from the provided `geneGen` generator,
     * with the number of genes determined by a random size between the specified minimum and maximum values.
     *
     * @param geneGen A generator for individual genes of type `G`.
     * @param minSize The minimum number of genes in the chromosome. Defaults to `0`.
     * @param maxSize The maximum number of genes in the chromosome. Defaults to `10`.
     * @tparam T The type of value held by the genes.
     * @tparam G The type of the gene, which must extend `Gene[T, G]`.
     * @return A generator that produces a tuple containing a `Chromosome[T, G]` and its size.
     */
    def chromosomeAndSizeGen[T, G <: Gene[T, G]](
        geneGen: Gen[SimpleGene],
        minSize: Int = 0,
        maxSize: Int = 10
    ): Gen[(SimpleChromosome, Int)] =
        Gen.chooseNum(minSize, maxSize).flatMap { size =>
            val genes = ListBuffer.empty[SimpleGene]
            for _ <- 0 until size do
                genes += geneGen.sample.get
            (SimpleChromosome(genes.toSeq), size)
        }

    /** Generates a chromosome with at least one invalid gene for testing purposes.
     *
     * The `chromosomeWithInvalidGenes` function creates a generator that produces a `SimpleChromosome` containing a
     * sequence of genes, with at least one gene guaranteed to be invalid. The number of genes in the chromosome is
     * determined by a random size between the specified minimum and maximum values.
     *
     * @param minSize The minimum number of genes in the chromosome. Defaults to `0`.
     * @param maxSize The maximum number of genes in the chromosome. Defaults to `10`.
     * @param isValid A generator that produces boolean values indicating the validity of each gene.
     *                The last gene in the chromosome is always invalid (`false`).
     * @return A generator that produces a tuple containing a `SimpleChromosome` with invalid genes and the size of the
     *         chromosome.
     */
    def chromosomeWithInvalidGenes(
        minSize: Int = 0, maxSize: Int = 10, isValid: Gen[Boolean] = Arbitrary.arbBool.arbitrary
    ): Gen[SimpleChromosome] =
        Gen.chooseNum(minSize, maxSize).flatMap { size =>
            val genes = ListBuffer.empty[SimpleGene]
            for _ <- 0 until size do
                genes += simpleGeneGen(isValid).sample.get
            // Ensure the chromosome has at least one invalid gene.
            genes += simpleGeneGen(Gen.const(false)).sample.get
            SimpleChromosome(genes.toSeq)
        }
    
    /** Represents a simple chromosome for testing purposes. */
    case class SimpleChromosome(override val genes: Seq[SimpleGene]) extends Chromosome[Int, SimpleGene] {
        override def duplicateWithGenes(genes: Seq[SimpleGene]): Chromosome[Int, SimpleGene] = SimpleChromosome(genes)
    }
}
