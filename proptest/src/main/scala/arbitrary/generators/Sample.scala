/*
 * Copyright (c) 2024, Ignacio Slater M.
 * 2-Clause BSD License.
 */

package munit.checkall
package arbitrary.generators

import arbitrary.shrinkers.Shrinker

import munit.checkall.utils.RTree

/**
 * A trait representing a sample value along with its possible shrinks.
 *
 * The `Sample` trait encapsulates a value of type `T` and provides a method to retrieve its shrink tree (`RTree[T]`).
 * Shrinking is a technique used in property-based testing to find simpler or smaller failing cases when a test fails.
 * The `shrinks` method returns an `RTree` that starts from the given value, allowing exploration of alternative
 * versions of the value that are simpler.
 *
 * @tparam T The type of the value being encapsulated.
 * @param value The generated value of type `T`.
 * @example
 * {{{
 *   val sample = new Sample {}
 *   println(sample.value)    // Outputs: 42
 *   println(sample.shrinks)  // Outputs: RTree starting with value 42
 * }}}
 */
trait Sample[+T](val value: T) {

    /**
     * Returns the shrink tree for the encapsulated value.
     *
     * The `shrinks` method generates an `RTree` starting with the current `value`. This tree can be used in
     * property-based testing to explore simpler or smaller versions of the `value` in case of test failures.
     *
     * @return An `RTree[T]` where the root is the current `value`.
     */
    def shrinks: RTree[T] = RTree(() => value)
}

/**
 * Companion object for creating instances of the `Sample` trait.
 *
 * The `Sample` object provides factory methods to create instances of the `Sample` trait. It allows you to create a
 * sample value along with its shrink tree, which is generated using a provided `Shrinker`.
 */
object Sample {

    /**
     * Creates a `Sample` instance with a specified value and shrinker.
     *
     * The `of` method generates a `Sample` for the provided value and uses the given `Shrinker` to create a shrink tree
     * for that value. The shrink tree (`RTree[T]`) is used to explore simpler versions of the value in case of test 
     * failures, helping to identify the minimal failing case.
     *
     * @param t    The value of type `T` to be encapsulated in the `Sample`.
     * @param shrinker The `Shrinker[T]` used to generate the shrink tree for the value.
     * @tparam T The type of the value.
     * @return A `Sample[T]` instance containing the value and its associated shrink tree.
     */
    def of[T](t: T, shrinker: Shrinker[T]): Sample[T] = new Sample[T](t) {

        /**
         * Returns the shrink tree for the encapsulated value using the provided `Shrinker`.
         *
         * @return An `RTree[T]` generated by the `Shrinker` for the current value.
         */
        override def shrinks: RTree[T] = shrinker.rtree(t)
    }

    /**
     * Wraps a value in a `Sample` instance.
     *
     * The `asSample` method creates a `Sample` object that encapsulates a given value. This method is useful when you
     * want to convert a plain value into a `Sample` for use in property-based testing. The resulting `Sample` does not
     * include any additional shrinking logic and simply holds the value provided.
     *
     * @param value The value to be wrapped in a `Sample`.
     * @tparam T The type of the value.
     * @return A `Sample[T]` containing the provided value.
     */
    def asSample[T](value: T): Sample[T] = new Sample[T](value) {}
}
