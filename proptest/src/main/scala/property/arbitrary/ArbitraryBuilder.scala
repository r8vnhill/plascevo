/*
 * Copyright (c) 2024, Ignacio Slater M.
 * 2-Clause BSD License.
 */

package cl.ravenhill.plascevo
package property.arbitrary

import property.RandomSource
import property.arbitrary.generators.{Arbitrary, Sample}
import property.arbitrary.shrinkers.Shrinker
import property.utils.random

type SampleFunction[A] = RandomSource => A

type EdgeCaseFunction[A] = RandomSource => Option[A]

/**
 * A builder class for creating instances of `Arbitrary` with customizable properties.
 *
 * The `ArbitraryBuilder` class provides a fluent API for constructing instances of `Arbitrary` with specific
 * configurations. It allows users to define a sample function, classifier, shrinker, and edge case function,
 * which can be used to generate arbitrary values, classify them, shrink them, and define edge cases for property-based
 * testing.
 *
 * @param sampleFunction A function that generates samples of type `A` based on the provided `RandomSource`.
 * @param classifier An optional classifier that can be used to classify generated values for reporting purposes.
 * @param shrinker An optional shrinker that defines how generated values of type `A` can be shrunk during testing.
 * @param edgeCaseFunction An optional function that provides edge cases for the generated values.
 * @tparam A The type of the values being generated by the `Arbitrary` instance.
 */
final class ArbitraryBuilder[A](
    private val sampleFunction: SampleFunction[A],
    private val classifier: Option[Classifier[A]],
    private val shrinker: Option[Shrinker[A]],
    private val edgeCaseFunction: Option[EdgeCaseFunction[A]],
) {

    /**
     * Adds a classifier to the `ArbitraryBuilder`.
     *
     * The `withClassifier` method allows users to specify a classifier that will be used to classify generated values
     * of type `A`. The classifier is useful for reporting and categorizing test results.
     *
     * @param classifier The classifier to be used with the generated values.
     * @return A new `ArbitraryBuilder` instance with the specified classifier.
     */
    def withClassifier(
        classifier: Classifier[A]
    ): ArbitraryBuilder[A] = new ArbitraryBuilder(sampleFunction, Some(classifier), shrinker, edgeCaseFunction)

    /**
     * Adds a shrinker to the `ArbitraryBuilder`.
     *
     * The `withShrinker` method allows users to specify a shrinker that defines how generated values of type `A` can be
     * shrunk. Shrinking is the process of reducing a value to a simpler form while maintaining its characteristics,
     * which is useful in property-based testing to find minimal failing cases.
     *
     * @param shrinker The shrinker to be used with the generated values.
     * @return A new `ArbitraryBuilder` instance with the specified shrinker.
     */
    def withShrinker(
        shrinker: Shrinker[A]
    ): ArbitraryBuilder[A] = new ArbitraryBuilder(sampleFunction, classifier, Some(shrinker), edgeCaseFunction)

    /**
     * Adds edge cases to the `ArbitraryBuilder`.
     *
     * The `withEdgeCases` method allows users to specify a sequence of edge cases that can be used in testing. Edge
     * cases are specific values that are known to be of particular interest for testing. If no edge cases are provided,
     * this function will be set to `None`.
     *
     * @param edgeCases A sequence of edge cases to be used with the generated values.
     * @return A new `ArbitraryBuilder` instance with the specified edge cases.
     */
    def withEdgeCases(
        edgeCases: Seq[A]
    ): ArbitraryBuilder[A] = edgeCases match
        case Nil => ArbitraryBuilder(sampleFunction, classifier, shrinker, None)
        case _ => ArbitraryBuilder(sampleFunction, classifier, shrinker, Some(rs => Some(edgeCases.random(rs.random))))

    /**
     * Builds an `Arbitrary` instance with the specified configurations.
     *
     * The `build` method finalizes the construction of the `Arbitrary` instance with the specified sample function,
     * classifier, shrinker, and edge case function. This `Arbitrary` instance can then be used to generate values
     * for property-based testing.
     *
     * @return An `Arbitrary[A]` instance configured with the specified properties.
     */
    def build(): Arbitrary[A] = new Arbitrary[A] {
        override def edgeCases(rs: RandomSource): Option[A] = edgeCaseFunction.flatMap(_(rs))

        override def sample(rs: RandomSource): Sample[A] = {
            val value = sampleFunction(rs)
            shrinker match {
                case Some(s) => Sample.of(value, s)
                case None => new Sample(value) {}
            }
        }

        override def classifier: Option[Classifier[? <: A]] = ArbitraryBuilder.this.classifier
    }
}

/**
 * Companion object for the `ArbitraryBuilder` class, providing utility methods for creating instances of
 * `ArbitraryBuilder`.
 *
 * The `ArbitraryBuilder` object contains factory methods to simplify the creation of `ArbitraryBuilder` instances. It
 * allows users to initialize an `ArbitraryBuilder` with a basic sampling function and provides a fluent API for further
 * customization.
 */
object ArbitraryBuilder {

    /**
     * Creates a new `ArbitraryBuilder` instance from a sampling function.
     *
     * The `of` method initializes an `ArbitraryBuilder` with a specified function that generates values of type `A`
     * based on a given `RandomSource`. This is a convenient way to start building an `Arbitrary` generator with a
     * custom sampling function, after which the builder can be further configured with additional options such as
     * classifiers, shrinkers, and edge cases.
     *
     * @param f A function that takes a `RandomSource` and generates a value of type `A`.
     * @tparam A The type of values to be generated by the `ArbitraryBuilder`.
     * @return An `ArbitraryBuilder[A]` instance initialized with the provided sampling function.
     */
    def of[A](f: RandomSource => A): ArbitraryBuilder[A] = new ArbitraryBuilder[A](f, None, None, None)
}
