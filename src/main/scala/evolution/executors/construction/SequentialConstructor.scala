package cl.ravenhill.plascevo
package evolution.executors.construction

import composerr.{ComposerrScope, constrained}
import exceptions.InvalidSizeException

import constraints.ints.BeNegative

/** A sequential constructor for generating sequences of values in an evolutionary algorithm.
 *
 * The `SequentialConstructor` class extends the [[ConstructorExecutor]] trait, providing a straightforward mechanism
 * to generate sequences of values in a sequential manner. This constructor applies an initialization function to
 * generate each element in the sequence, ensuring that the specified size is non-negative. It is commonly used in
 * scenarios where a fixed-size sequence of elements needs to be created, such as in the construction of chromosomes
 * or genotypes.
 *
 * @tparam T The type of value generated by the constructor.
 *
 * @example
 * {{{
 * // Example usage of SequentialConstructor to create a sequence of integers
 * val constructor = SequentialConstructor[Int]()
 * val sequence = constructor(5, index => index * 2)
 * // sequence: Seq[Int] = Seq(0, 2, 4, 6, 8)
 * }}}
 */
class SequentialConstructor[T] extends ConstructorExecutor[T] {

    /** Generates a sequence of values using the provided initialization function.
     *
     * The `apply` method creates a sequence of the specified size by applying the given initialization function to each
     * index in the range from `0` to `size - 1`. The method ensures that the size is non-negative before proceeding with
     * the sequence construction. If a negative size is provided, an [[InvalidSizeException]] is thrown.
     *
     * @param size The number of elements to generate in the sequence.
     * @param init A function that takes an index and returns a value of type `T`, used to initialize each element in the sequence.
     * @return A sequence of values generated by applying the initialization function to each index.
     * @throws InvalidSizeException if the specified size is negative.
     */
    override def apply(size: Int, init: (index: Int) => T): Seq[T] = {
        constrained {
            "Cannot create a sequence with a negative size." ~ (size mustNot BeNegative, InvalidSizeException(_))
        }

        (0 until size).map(init)
    }
}
