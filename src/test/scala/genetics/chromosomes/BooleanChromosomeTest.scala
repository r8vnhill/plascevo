package cl.ravenhill.plascevo
package genetics.chromosomes

import ToStringMode.{DEFAULT, SIMPLE}
import genetics.genes.{BooleanGene, booleanGeneGen}
import utils.Numeric.roundUpToMultipleOf

import org.scalacheck.Gen

class BooleanChromosomeTest extends AbstractPlascevoTest {
    "A BooleanChromosome" - {
        "can be created with a list of genes" in {
            forAll(booleanChromosomeAndGenesGen()) { (chromosome, genes) =>
                chromosome.genes should contain theSameElementsInOrderAs genes
            }
        }

        "can be duplicated with a new set of genes" in {
            forAll(booleanChromosomeGen(), Gen.listOf(booleanGeneGen())) { (original, newGenes) =>
                val duplicated = original.duplicateWithGenes(newGenes)
                duplicated.genes should contain theSameElementsInOrderAs newGenes
            }
        }


        "can be converted to a String when" - {
            "using the SIMPLE mode" in {
                forAll(booleanChromosomeGen()) { chromosome =>
                    Domain.toStringMode = SIMPLE
                    val result = chromosome.toString

                    val withoutSpaces = result.replaceAll(" ", "")
                    val chunkSize = 4
                    val isMultipleOfChunkSize = withoutSpaces.length % chunkSize == 0
                    val expectedSize = chromosome.size roundUpToMultipleOf chunkSize
                    val padding = "0" * (expectedSize - chromosome.size)
                    val expectedResult = (padding + chromosome.genes.map(_.toInt).mkString)
                        .grouped(chunkSize)
                        .mkString(" ")

                    isMultipleOfChunkSize shouldBe true
                    chromosome.toString shouldBe expectedResult
                }
            }

            "using DEFAULT mode" in {
                forAll(booleanChromosomeAndGenesGen()) { (chromosome, genes) =>
                    Domain.toStringMode = DEFAULT
                    chromosome.toString shouldBe s"BooleanChromosome(${genes.mkString(", ")})"
                }
            }
        }
    }
}

/**
 * Generates a `BooleanChromosome` along with its corresponding sequence of `BooleanGene` instances.
 *
 * The `booleanChromosomeAndGenesGen` function creates a generator that produces a tuple containing a
 * `BooleanChromosome` and the sequence of `BooleanGene` instances used to construct it. The chromosome is built from
 * a list of boolean genes generated by the provided `geneGen` generator.
 *
 * @param geneGen A generator that produces `BooleanGene` instances (`TrueGene` or `FalseGene`). Defaults to the
 *                `booleanGeneGen()` function, which generates boolean genes based on random boolean values.
 * @return A generator that produces a tuple containing a `BooleanChromosome` and a sequence of `BooleanGene`
 *         instances used to construct that chromosome.
 */
private def booleanChromosomeAndGenesGen(
    geneGen: Gen[BooleanGene] = booleanGeneGen()
): Gen[(BooleanChromosome, Seq[BooleanGene])] = for {
    genes <- Gen.listOf(geneGen)
} yield (BooleanChromosome(genes), genes)

/**
 * Generates a `BooleanChromosome` composed of a sequence of `BooleanGene` instances.
 *
 * The `booleanChromosomeGen` function creates a generator that produces a `BooleanChromosome` from a list of boolean
 * genes generated by the provided `geneGen` generator. This function is useful in scenarios where you need to
 * generate random `BooleanChromosome` instances for testing or evolutionary algorithms.
 *
 * @param geneGen A generator that produces `BooleanGene` instances (`TrueGene` or `FalseGene`). Defaults to the
 *                `booleanGeneGen()` function, which generates boolean genes based on random boolean values.
 * @return A generator that produces a `BooleanChromosome` consisting of a sequence of `BooleanGene` instances.
 */
private def booleanChromosomeGen(
    geneGen: Gen[BooleanGene] = booleanGeneGen()
): Gen[BooleanChromosome] = for {
    genes <- Gen.listOf(geneGen)
} yield BooleanChromosome(genes)

