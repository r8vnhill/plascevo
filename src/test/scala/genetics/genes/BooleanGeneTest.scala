package cl.ravenhill.plascevo
package genetics.genes

import org.scalacheck.{Arbitrary, Gen}

import scala.util.Random

class BooleanGeneTest extends AbstractPlascevoTest {
    "A BooleanGene" - {
        "should generate a random boolean value" in {
            forAll(booleanGeneGen(), rngPairGen()) { (gene, rngPair) =>
                given Random = rngPair._1
                gene.generate shouldBe rngPair._2.nextBoolean()
            }
        }

        "can be duplicated with a true value" in {
            forAll(booleanGeneGen()) { gene =>
                gene.duplicateWithValue(true) shouldBe TrueGene
            }
        }

        "can be duplicated with a false value" in {
            forAll(booleanGeneGen()) { gene =>
                gene.duplicateWithValue(false) shouldBe FalseGene
            }
        }
    }
}

/**
 * Generates a `BooleanGene` based on the provided boolean generator.
 *
 * The `booleanGeneGen` method takes a generator for boolean values and maps it to a corresponding `BooleanGene`
 * instance. If the generated boolean value is `true`, the method returns a `TrueGene`; otherwise, it returns a
 * `FalseGene`.
 *
 * @param gen A generator that produces boolean values (`true` or `false`).
 * @return A generator that produces `BooleanGene` instances (`TrueGene` or `FalseGene`), depending on the boolean
 *         value generated by the input generator.
 */
private def booleanGeneGen(
    gen: Gen[Boolean] = Arbitrary.arbBool.arbitrary
): Gen[BooleanGene] = gen.map(value => if value then TrueGene else FalseGene)
